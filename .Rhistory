ggplotly(p)
})
}
shinyApp(ui, server)
sessionInfo()
devtools::install_github('ramnathv/htmlwidgets')
devtools::install_github('ramnathv/htmlwidgets')
install.packages("Rtools")
devtools::install_github('ramnathv/htmlwidgets')
devtools::install_github('ramnathv/htmlwidgets')
install.packages("rlang")
devtools::install_github('ramnathv/htmlwidgets')
shiny::runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
remove.packages("plotly")
install.packages("plotly")
shiny::runApp('ImmuneMetAtlas/App')
shiny::runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
#' @description This function will load packages given and install them
#'              if they are not installed yet.
#'
#' @param packs A vector of package names
check_packages <- function(packs){
not_installed <- packs[which(sapply(packs, function(package){
if (!package %in% rownames(installed.packages())){
print(paste("Installing", package))
install.packages(package, character.only = TRUE)
}
print(paste("Loading", package))
require(package, character.only = TRUE, quietly = TRUE)
return(package %in% rownames(installed.packages()))
}) == F)]
print(paste("Could not install / find:", not_installed))
}
#' @description This piece of code is used in the ui and therefore not located in the server
#'              function. It loads all packages needed using the __check_packages()__ function.
version <- "2.0"
packages <- c("shiny", "igraph", "colourpicker", "dplyr", "shinycustomloader", "shinythemes", "markdown", "rmarkdown", "knitr", "shinydashboard",
"heatmaply", "DT", "RColorBrewer", "shinyalert", "plotly", "crosstalk", "viridis", "parallel", "shinyjs", "data.table",
"ggplot2", "network", "GGally", "showtext", "sna", "gdata", "ggrepel", "yaml", "plyr", "tidyr", "shinyTree", "ewrfdfs")
check_packages(packages)
#' @description This function will load packages given and install them
#'              if they are not installed yet.
#'
#' @param packs A vector of package names
check_packages <- function(packs){
not_installed <- packs[which(sapply(packs, function(package){
if (!package %in% rownames(installed.packages())){
install.packages(package, character.only = TRUE)
}
supressMessages(require(package, character.only = TRUE, quietly = TRUE, verbose = F))
return(package %in% rownames(installed.packages()))
}) == F)]
print(paste("Could not install / find:", not_installed))
}
#' @description This piece of code is used in the ui and therefore not located in the server
#'              function. It loads all packages needed using the __check_packages()__ function.
version <- "2.0"
packages <- c("shiny", "igraph", "colourpicker", "dplyr", "shinycustomloader", "shinythemes", "markdown", "rmarkdown", "knitr", "shinydashboard",
"heatmaply", "DT", "RColorBrewer", "shinyalert", "plotly", "crosstalk", "viridis", "parallel", "shinyjs", "data.table",
"ggplot2", "network", "GGally", "showtext", "sna", "gdata", "ggrepel", "yaml", "plyr", "tidyr", "shinyTree", "ewrfdfs")
check_packages(packages)
#' @description This function will load packages given and install them
#'              if they are not installed yet.
#'
#' @param packs A vector of package names
check_packages <- function(packs){
not_installed <- packs[which(sapply(packs, function(package){
if (!package %in% rownames(installed.packages())){
install.packages(package, character.only = TRUE)
}
suppressMessages(require(package, character.only = TRUE, quietly = TRUE, verbose = F))
return(package %in% rownames(installed.packages()))
}) == F)]
print(paste("Could not install / find:", not_installed))
}
#' @description This piece of code is used in the ui and therefore not located in the server
#'              function. It loads all packages needed using the __check_packages()__ function.
version <- "2.0"
packages <- c("shiny", "igraph", "colourpicker", "dplyr", "shinycustomloader", "shinythemes", "markdown", "rmarkdown", "knitr", "shinydashboard",
"heatmaply", "DT", "RColorBrewer", "shinyalert", "plotly", "crosstalk", "viridis", "parallel", "shinyjs", "data.table",
"ggplot2", "network", "GGally", "showtext", "sna", "gdata", "ggrepel", "yaml", "plyr", "tidyr", "shinyTree", "ewrfdfs")
check_packages(packages)
#' @description This function will load packages given and install them
#'              if they are not installed yet.
#'
#' @param packs A vector of package names
check_packages <- function(packs){
not_installed <- packs[which(sapply(packs, function(package){
if (!package %in% rownames(installed.packages())){
install.packages(package, character.only = TRUE)
}
suppressMessages(library(package, character.only = TRUE, quietly = TRUE, verbose = F))
return(package %in% rownames(installed.packages()))
}) == F)]
print(paste("Could not install / find:", not_installed))
}
#' @description This piece of code is used in the ui and therefore not located in the server
#'              function. It loads all packages needed using the __check_packages()__ function.
version <- "2.0"
packages <- c("shiny", "igraph", "colourpicker", "dplyr", "shinycustomloader", "shinythemes", "markdown", "rmarkdown", "knitr", "shinydashboard",
"heatmaply", "DT", "RColorBrewer", "shinyalert", "plotly", "crosstalk", "viridis", "parallel", "shinyjs", "data.table",
"ggplot2", "network", "GGally", "showtext", "sna", "gdata", "ggrepel", "yaml", "plyr", "tidyr", "shinyTree", "ewrfdfs")
check_packages(packages)
#' @description This function will load packages given and install them
#'              if they are not installed yet.
#'
#' @param packs A vector of package names
check_packages <- function(packs){
not_installed <- packs[which(sapply(packs, function(package){
if (!package %in% rownames(installed.packages())){
install.packages(package, character.only = TRUE)
}
suppressMessages(require(package, character.only = TRUE, quietly = TRUE))
return(package %in% rownames(installed.packages()))
}) == F)]
print(paste("Could not install / find:", not_installed))
}
#' @description This piece of code is used in the ui and therefore not located in the server
#'              function. It loads all packages needed using the __check_packages()__ function.
version <- "2.0"
packages <- c("shiny", "igraph", "colourpicker", "dplyr", "shinycustomloader", "shinythemes", "markdown", "rmarkdown", "knitr", "shinydashboard",
"heatmaply", "DT", "RColorBrewer", "shinyalert", "plotly", "crosstalk", "viridis", "parallel", "shinyjs", "data.table",
"ggplot2", "network", "GGally", "showtext", "sna", "gdata", "ggrepel", "yaml", "plyr", "tidyr", "shinyTree", "ewrfdfs")
check_packages(packages)
#' @description This function will load packages given and install them
#'              if they are not installed yet.
#'
#' @param packs A vector of package names
check_packages <- function(packs){
not_installed <- packs[which(sapply(packs, function(package){
if (!package %in% rownames(installed.packages())){
install.packages(package, character.only = TRUE)
}
suppressWarnings(suppressPackageStartupMessages(require(package, character.only = TRUE, quietly = TRUE)))
return(package %in% rownames(installed.packages()))
}) == F)]
print(paste("Could not install / find:", not_installed))
}
#' @description This piece of code is used in the ui and therefore not located in the server
#'              function. It loads all packages needed using the __check_packages()__ function.
version <- "2.0"
packages <- c("shiny", "igraph", "colourpicker", "dplyr", "shinycustomloader", "shinythemes", "markdown", "rmarkdown", "knitr", "shinydashboard",
"heatmaply", "DT", "RColorBrewer", "shinyalert", "plotly", "crosstalk", "viridis", "parallel", "shinyjs", "data.table",
"ggplot2", "network", "GGally", "showtext", "sna", "gdata", "ggrepel", "yaml", "plyr", "tidyr", "shinyTree", "ewrfdfs")
check_packages(packages)
#' @description This function will load packages given and install them
#'              if they are not installed yet.
#'
#' @param packs A vector of package names
check_packages <- function(packs){
not_installed <- packs[which(sapply(packs, function(package){
if (!package %in% rownames(installed.packages())){
install.packages(package, character.only = TRUE)
}
suppressWarnings(suppressPackageStartupMessages(require(package, character.only = TRUE, quietly = TRUE)))
return(package %in% rownames(installed.packages()))
}) == F)]
print(paste("Could not install / find:", not_installed, "please check the manual on how to install this package."))
}
#' @description This piece of code is used in the ui and therefore not located in the server
#'              function. It loads all packages needed using the __check_packages()__ function.
version <- "2.0"
packages <- c("shiny", "igraph", "colourpicker", "dplyr", "shinycustomloader", "shinythemes", "markdown", "rmarkdown", "knitr", "shinydashboard",
"heatmaply", "DT", "RColorBrewer", "shinyalert", "plotly", "crosstalk", "viridis", "parallel", "shinyjs", "data.table",
"ggplot2", "network", "GGally", "showtext", "sna", "gdata", "ggrepel", "yaml", "plyr", "tidyr", "shinyTree", "ewrfdfs")
check_packages(packages)
#' @description This function will load packages given and install them
#'              if they are not installed yet.
#'
#' @param packs A vector of package names
check_packages <- function(packs){
not_installed <- packs[which(sapply(packs, function(package){
if (!package %in% rownames(installed.packages())){
install.packages(package, character.only = TRUE)
}
suppressWarnings(suppressPackageStartupMessages(require(package, character.only = TRUE, quietly = TRUE)))
return(package %in% rownames(installed.packages()))
}) == F)]
print(paste0("Could not install / find: '", not_installed, "', please check the manual on how to install this package."))
}
#' @description This piece of code is used in the ui and therefore not located in the server
#'              function. It loads all packages needed using the __check_packages()__ function.
version <- "2.0"
packages <- c("shiny", "igraph", "colourpicker", "dplyr", "shinycustomloader", "shinythemes", "markdown", "rmarkdown", "knitr", "shinydashboard",
"heatmaply", "DT", "RColorBrewer", "shinyalert", "plotly", "crosstalk", "viridis", "parallel", "shinyjs", "data.table",
"ggplot2", "network", "GGally", "showtext", "sna", "gdata", "ggrepel", "yaml", "plyr", "tidyr", "shinyTree", "ewrfdfs")
check_packages(packages)
source('ImmuneMetAtlas/App/app.R')
library(shiny); source('ImmuneMetAtlas/App/app.R')
runApp('ImmuneMetAtlas/App')
library(shiny); source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
library(shiny); source('ImmuneMetAtlas/App/app.R')
df <- data.frame("from" = c(1,2,3,4,5), "to" = c(2,5,1,3,1))
library(igraph)
g <- graph_from_data_frame(df)
E(g)
igraph::get.data.frame(g, "edges")
library(dplyr)
df2 <- data.frame("from" = c(1,2,3,4,5), "to" = c(2,5,1,3,1), "conf" = c(45546,23123,567567,23423,678))
inner_join(df, df2)
df2 <- data.frame("from" = c(1,2,4,5), "to" = c(2,5,3,1), "conf" = c(45546,23123,567567,23423,678))
inner_join(df, df2)
df <- data.frame("from" = c(1,2,3,4,5), "to" = c(2,5,1,3,1))
df2 <- data.frame("from" = c(1,2,4,5), "to" = c(2,5,3,1), "conf" = c(45546,23123,567567,23423,678))
df
df2
df2 <- data.frame("from" = c(1,2,4,5), "to" = c(2,5,3,1), "conf" = c(45546,23123,567567,23423))
df2
inner_join(df, df2)
df <- data.frame("from" = c(1,2,3,4,5), "to" = c(2,5,1,3,1))
df2 <- data.frame("from" = c(1,4,5), "to" = c(2,5,1), "conf" = c(45546,23123,567567,23423))
df
df2
g <- graph_from_data_frame(df)
inner_join(df, df2)
df <- igraph::get.data.frame(g, "edges")
df
innerjoin(df, df2)
inner_join(df, df2)
df
df <- data.frame("from" = c(1,2,3,4,5), "to" = c(2,5,1,3,1))
df2 <- data.frame("from" = c(1,4,5), "to" = c(2,5,1), "conf" = c(45546,23123,567567,23423))
df
df2
inner_join(df, df2)
df3 <- igraph::get.data.frame(g, "edges")
df3
inner_join(df3, df2)
df2 <- as.character(data.frame("from" = c(1,4,5), "to" = c(2,5,1), "conf" = c(45546,23123,567567,23423)))
df2 <- as.character(data.frame("from" = c(1,4,5), "to" = c(2,5,1), "conf" = c(45546,23123,23423)))
df2
df2 <- data.frame("from" = c("1","4","5"), "to" = c("2","5","1"), "conf" = c("45546","23123","567567"))
g <- graph_from_data_frame(df)
df3 <- igraph::get.data.frame(g, "edges")
df3
inner_join(df3, df2)
left_join(df3, df2)
df2 <- data.frame("from" = c("1","4","5"), "to" = c("2","5","1"), "conf" = c(455,231,567))
left_join(df3, df2) %>%
filter(conf >= 300) %>%
as.data.frame()
left_join(df3, df2)
left_join(df3, df2) %>%
filter(conf >= 300 | is.na(conf) ) %>%
as.data.frame()
left_join(df3, df2)
df <- data.frame("from" = c(1,2,3,4,5,4), "to" = c(2,5,1,3,1, 5))
g <- graph_from_data_frame(df)
df3 <- igraph::get.data.frame(g, "edges")
df3
left_join(df3, df2)
left_join(df3, df2) %>%
filter(conf >= 300 | is.na(conf) ) %>%
as.data.frame()
df <- data.frame("from" = c(1,2,3,4,5,4), "to" = c(2,5,1,3,1, 5))
df2 <- data.frame("from" = c("1","4","5"), "to" = c("2","5","1"), "conf" = c(455,231,567))
df
df2
g <- graph_from_data_frame(df)
df3 <- igraph::get.data.frame(g, "edges")
df3
left_join(df3, df2)
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
runApp('ImmuneMetAtlas/App')
library(shiny); source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
# Start the application
script.dir <- dirname(sys.frame(1)$ofile)
# Start the application
dirname(sys.frame()$ofile)
# Start the application
dirname(sys.frame(1)$ofile)
# Start the application
getSrcDirectory(function(f) f)
# Start the application
getSrcDirectory(function(f) {f})
# Start the application
utils::getSrcDirectory(function(f) {f})
paste0(gsub("\\", "/", fileSnapshot()$path, fixed=TRUE),"/")
fileSnapshot()$path
getwd(".")
setwd(".")
getwd()
this.file <- sys.frame(tail(grep('source',sys.calls()),n=1))$ofile
# Start the application
library(R.utils)
findSourceTraceback()
a <- findSourceTraceback()
a
names(a)
#' @description This function will load packages given and install them
#'              if they are not installed yet.
#'
#' @param packs A vector of package names
check_packages <- function(packs){
not_installed <- packs[which(sapply(packs, function(package){
if (!package %in% rownames(installed.packages())){
install.packages(package, character.only = TRUE)
}
suppressWarnings(suppressPackageStartupMessages(require(package, character.only = TRUE, quietly = TRUE)))
return(package %in% rownames(installed.packages()))
}) == F)]
if (length(not_installed) > 0){
print(paste0("Could not install / find: '", not_installed, "', please check the manual on how to install this package."))
}
}
#' @description This piece of code is used in the ui and therefore not located in the server
#'              function. It loads all packages needed using the __check_packages()__ function.
version <- "2.0"
packages <- c("shiny", "igraph", "colourpicker", "dplyr", "shinythemes", "markdown", "rmarkdown", "knitr", "shinydashboard", "htmlwidgets",
"heatmaply", "DT", "RColorBrewer", "shinyalert", "plotly", "crosstalk", "viridis", "parallel", "shinyjs", "data.table", "formattable",
"ggplot2", "network", "GO.db", "intergraph", "GGally", "showtext", "sna", "gdata", "ggrepel", "yaml", "plyr", "tidyr", "shinyTree")
check_packages(packages)
source('ImmuneMetAtlas/App/app.R')
library(shiny); source('ImmuneMetAtlas/App/app.R')
#' @description This function will load packages given and install them
#'              if they are not installed yet.
#'
#' @param packs A vector of package names
check_packages <- function(packs){
not_installed <- packs[which(sapply(packs, function(package){
if (!package %in% rownames(installed.packages())){
install.packages(package, character.only = TRUE)
}
suppressWarnings(suppressPackageStartupMessages(require(package, character.only = TRUE, quietly = TRUE)))
return(package %in% rownames(installed.packages()))
}) == F)]
if (length(not_installed) > 0){
print(paste0("Could not install / find: '", not_installed, "', please check the manual on how to install this package."))
}
}
#' @description This piece of code is used in the ui and therefore not located in the server
#'              function. It loads all packages needed using the __check_packages()__ function.
version <- "2.0"
packages <- c("shiny", "igraph", "colourpicker", "dplyr", "shinythemes", "shinycssloaders", "waiter", "markdown", "rmarkdown", "knitr", "shinydashboard", "htmlwidgets",
"heatmaply", "DT", "RColorBrewer", "shinyalert", "plotly", "crosstalk", "viridis", "parallel", "shinyjs", "data.table", "formattable", "gtools",
"ggplot2", "network", "GO.db", "intergraph", "GGally", "showtext", "sna", "gdata", "ggrepel", "yaml", "plyr", "tidyr", "shinyTree")
check_packages(packages)
sessionInfo()
#' @description This function will load packages given and install them
#'              if they are not installed yet.
#'
#' @param packs A vector of package names
check_packages <- function(packs){
not_installed <- packs[which(sapply(packs, function(package){
if (!package %in% rownames(installed.packages())){
install.packages(package, character.only = TRUE)
}
suppressWarnings(suppressPackageStartupMessages(require(package, character.only = TRUE, quietly = TRUE)))
return(package %in% rownames(installed.packages()))
}) == F)]
if (length(not_installed) > 0){
print(paste0("Could not install / find: '", not_installed, "', please check the manual on how to install this package."))
}
}
#' @description This piece of code is used in the ui and therefore not located in the server
#'              function. It loads all packages needed using the __check_packages()__ function.
version <- "2.0"
packages <- c("shiny", "igraph", "colourpicker", "dplyr", "shinythemes", "shinycssloaders", "waiter", "markdown", "rmarkdown", "knitr", "shinydashboard", "htmlwidgets",
"heatmaply", "DT", "RColorBrewer", "shinyalert", "plotly", "crosstalk", "viridis", "parallel", "shinyjs", "data.table", "formattable", "gtools",
"ggplot2", "network", "GO.db", "intergraph", "GGally", "showtext", "sna", "gdata", "ggrepel", "yaml", "plyr", "tidyr", "shinyTree")
check_packages(packages)
sessionInfo()
library(shiny); source('ImmuneMetAtlas/App/app.R')
source('ImmuneMetAtlas/App/app.R')
data.frame(
x = seq(from= 15, to = 1, by = -1),
y = c(4, 6, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10)
)
data.frame(
x = seq(from= 15, to = 0, by = -1),
y = c(4, 6, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10)
)
data.frame(
x = seq(from= 15, to = 1, by = -1),
y = c(4, 6, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10)
)
plot(x, y)
plot(data.frame(
x = seq(from= 15, to = 1, by = -1),
y = c(4, 6, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10)
))
matplot(data.frame(
x = seq(from= 15, to = 1, by = -1),
y = c(4, 6, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10)
))
library(heatmaply)
sessionInfo()
message("Preprocessing cancelled\n")
#'@title Run Preprocessing
#'@importFrom reticulate py_available py_config
run_preprocessing <- function(config_path){
warning("This function will run the processing Python scripts. This may take a while (~15 min)")
continue <- readline(prompt = "Do you want to continue? (y/n) ")
if (tolower(continue) == "y"){
if (reticulate::py_available(T)){
message("Executing Preprocessing scripts, please wait.\n")
file <- system.file("Python", "Preprocessing.py", package = "ImmunoMet", mustWork = T)
python <- reticulate::py_config()$python
command <- sprintf("%s %s %s", python, file, config_path)
system(command)
message("Preprocessing succesful\n")
} else {
stop(paste("Preprocessing failed. No Python3 installation was found.",
"Ensure Python3 is installed and try again.\n"))
}
} else {
message("Preprocessing cancelled\n")
}
}
run_preprocessing("")
#'@importFrom reticulate py_available py_config
run_preprocessing <- function(config_path){
warning("This function will run the processing Python scripts. This may take a while (~15 min)", immediate. = T)
continue <- readline(prompt = "Do you want to continue? (y/n) ")
if (tolower(continue) == "y"){
if (reticulate::py_available(T)){
message("Executing Preprocessing scripts, please wait.\n")
file <- system.file("Python", "Preprocessing.py", package = "ImmunoMet", mustWork = T)
python <- reticulate::py_config()$python
command <- sprintf("%s %s %s", python, file, config_path)
system(command)
message("Preprocessing succesful\n")
} else {
stop(paste("Preprocessing failed. No Python3 installation was found.",
"Ensure Python3 is installed and try again.\n"))
}
} else {
message("Preprocessing cancelled\n")
}
}
run_preprocessing("")
#'@importFrom reticulate py_available py_config
run_preprocessing <- function(config_path){
message("This function will run the processing Python scripts. This may take a while (~15 min)")
continue <- readline(prompt = "Do you want to continue? (y/n) ")
if (tolower(continue) == "y"){
if (reticulate::py_available(T)){
message("Executing Preprocessing scripts, please wait.\n")
file <- system.file("Python", "Preprocessing.py", package = "ImmunoMet", mustWork = T)
python <- reticulate::py_config()$python
command <- sprintf("%s %s %s", python, file, config_path)
system(command)
message("Preprocessing succesful\n")
} else {
stop(paste("Preprocessing failed. No Python3 installation was found.",
"Ensure Python3 is installed and try again.\n"))
}
} else {
message("Preprocessing cancelled\n")
}
}
run_preprocessing("")
run_preprocessing("")
library(ImmunoMet)
path <- "C:/Users/Pascal/Documents/ImmuneMetAtlas/App/config.yaml"
run_preprocessing(path)
setwd("~/ImmunoMet/ImmunoMet")
devtools::install(upgrade = "never")
library(ImmunoMet)
run_preprocessing("config.yaml")
