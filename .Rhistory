to_pick <- names(df) %in% colnames(heatmap_df)
names <- names(df)[to_pick]
stats <- df[to_pick]
vals <- heatmap_df[V(g)$name[which(V(g)$type == "Metabolite")], names]
if (is.null(nrow(vals))){
close <- sum(vals)
number <- sum(vals > 0)
total <- sum(heatmap_df[,names] > 0)
} else {
close <- colSums(vals)
number <- colSums(vals > 0)
total <- colSums(heatmap_df[,names] > 0)
}
df <- data.frame(go = names, Pvalue = stats, Closeness = close, number = number, total = total) %>% dplyr::filter(number > 0)
g <- ggplot(df, aes(x = Closeness, y = Pvalue, size = total, color = number, text = go)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
return(plotly::ggplotly(g))
}
get_2d_scatter(g)
df <- get_2d_scatter(g)
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality))
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue))
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = count)
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = count())
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = count(GO))
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = count(Pvalue))
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = count)
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = nrow)
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = nrow(.))
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n(.))
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = count(.))
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = count(.)) %>%
unique
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = count(.)) %>%
unique()
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = count(.)) %>%
as.data.frame
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = count(.))
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = count(.)) %>%
groups
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = count(.)) %>%
groups()
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = group_size())
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = group_size(.))
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = sum(.) / n())
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n())
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n(), Total = total) %>%
ungroup()
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n(), Total = total) %>%
ungroup
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n(), Total = total) %>%
dplyr::ungroup()
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n()) %>%
dplyr::ungroup()
df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n()) %>%
dplyr::ungroup() %>% as.data.frame
df <- df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n())
g <- ggplot(df, aes(x = Closeness, y = Pvalue, color = number, text = go)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
library(ggplot)
library(ggplot2)
g <- ggplot(df, aes(x = Closeness, y = Pvalue, color = number, text = go)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
g
g <- ggplot(df, aes(x = Closeness, y = Pvalue, color = number, text = GO)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
g
g <- ggplot(df, aes(x = Closeness, y = Pvalue, color = Number, text = GO)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
g
g <- ggplot(df, aes(x = Closeness, y = Pvalue, color = Number, text = GO)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal()
g
g <- ggplot(df, aes(x = Closeness, y = Pvalue, color = Number, text = GO)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(10, 15))
g
df <- df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n()) %>%
dplyr::ungroup()
df <- get_2d_scatter(g)
df <- df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n()) %>%
dplyr::ungroup()
df <- get_2d_scatter(g)
g <- example_graph()
df <- get_2d_scatter(g)
df <- df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n()) %>%
dplyr::ungroup()
g <- ggplot(df, aes(x = Closeness, y = Pvalue, color = Number, text = GO)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(10, 15))
g
df
df <- get_2d_scatter(g)
g <- example_graph()
df <- get_2d_scatter(g)
df <- df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n()) %>%
dplyr::ungroup() %>% as.data.frame
g <- ggplot(df, aes(x = Closeness, y = Pvalue, color = Number, text = GO)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(10, 15))
g
df
ggplot(df, aes(x = Closeness, y = Pvalue, text = GO)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(10, 15))
g <- example_graph()
df <- get_2d_scatter(g)
a <- c(1, 2, 3)
df <- df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = a) %>%
dplyr::ungroup() %>% as.data.frame
df
df <- df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue)) %>%
dplyr::ungroup() %>% bind_cols(a) %>% as.data.frame
a <
df <- df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue)) %>%
dplyr::ungroup() %>% bind_cols(A = a) %>% as.data.frame
a <- c(1, 2, 3)
df <- df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue)) %>%
dplyr::ungroup() %>% bind_cols(A = a) %>% as.data.frame
df <- get_2d_scatter(g)
a <- c(1, 2, 3)
df <- df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue)) %>%
dplyr::ungroup() %>% bind_cols(A = a) %>% as.data.frame
df
go_metabolite %>% filter(GO == "GO:0001774")
go_metabolite %>% filter(GO %in% c("GO:0001774", "GO:0002274"))
go_metabolite %>% filter(GO %in% c("GO:0001774", "GO:0002274")) %>% group_by(GO) %>% n(.)
go_metabolite %>% filter(GO %in% c("GO:0001774", "GO:0002274")) %>% group_by(GO) %>% n()
go_metabolite %>% filter(GO %in% c("GO:0001774", "GO:0002274")) %>% group_by(GO) %>% nrow
go_metabolite %>%
filter(GO %in% c("GO:0001774", "GO:0002274")) %>%
group_by(GO) %>%
summarize(Total = n())
df
df <- get_2d_scatter(g)
df
df <- df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n()) %>%
dplyr::ungroup() %>% bind_cols(A = a) %>% as.data.frame
df
go_metabolite %>%
filter(GO %in% df$GO) %>%
group_by(GO) %>%
summarize(Total = n())
go_metabolite %>%
filter(GO %in% df$GO) %>%
group_by(GO) %>%
summarize(Total = n()) %>%
right_join(df, "GO")
df <- get_2d_scatter(g)
df <- df %>% group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue), Number = n()) %>%
dplyr::ungroup()
go_metabolite %>%
filter(GO %in% df$GO) %>%
group_by(GO) %>%
summarize(Total = n()) %>%
right_join(df, "GO")
#'@title Produce 2D pvalue-closeness scatter plot
#'@usage get_2d_scatter(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@importFrom dplyr filter
#'@importFrom plotly ggplotly
#'@importFrom ggplot2 ggplot geom_point ylim scale_color_gradient
#'theme_minimal scale_size_continuous
get_2d_scatter <- function(g){
df <- igraph::as_data_frame(g, what = "vertices")
ids <- get_go_ids_by_go(names(unlist(df$go)))
pvalues <- unique(data.frame(GO = ids, Pvalue = unlist(df$go)))
mets <- get_metabolite_ids(rownames(df))
df <- go_metabolite %>%
dplyr::filter(GO %in% ids) %>%
dplyr::filter(Metabolite %in% mets) %>%
dplyr::left_join(pvalues, by = "GO") %>%
group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue)) %>%
dplyr::ungroup()
df <- go_metabolite %>%
filter(GO %in% df$GO) %>%
group_by(GO) %>%
summarize(Total = n()) %>%
right_join(df, "GO")
g <- ggplot(df, aes(x = Closeness, y = Pvalue, size = total, color = number, text = go)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
return(plotly::ggplotly(g))
}
get_2d_scatter(g)
g <- example_graph()
get_2d_scatter(g)
#'@title Produce 2D pvalue-closeness scatter plot
#'@usage get_2d_scatter(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@importFrom dplyr filter
#'@importFrom plotly ggplotly
#'@importFrom ggplot2 ggplot geom_point ylim scale_color_gradient
#'theme_minimal scale_size_continuous
get_2d_scatter <- function(g){
df <- igraph::as_data_frame(g, what = "vertices")
ids <- get_go_ids_by_go(names(unlist(df$go)))
pvalues <- unique(data.frame(GO = ids, Pvalue = unlist(df$go)))
mets <- get_metabolite_ids(rownames(df))
df <- go_metabolite %>%
dplyr::filter(GO %in% ids) %>%
dplyr::filter(Metabolite %in% mets) %>%
dplyr::left_join(pvalues, by = "GO") %>%
group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue)) %>%
dplyr::ungroup()
df <- go_metabolite %>%
filter(GO %in% df$GO) %>%
group_by(GO) %>%
summarize(Total = n()) %>%
right_join(df, "GO")
g <- ggplot(df, aes(x = Closeness, y = Pvalue, size = total, color = number, text = GO)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
return(plotly::ggplotly(g))
}
get_2d_scatter(g)
#'@title Produce 2D pvalue-closeness scatter plot
#'@usage get_2d_scatter(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@importFrom dplyr filter
#'@importFrom plotly ggplotly
#'@importFrom ggplot2 ggplot geom_point ylim scale_color_gradient
#'theme_minimal scale_size_continuous
get_2d_scatter <- function(g){
df <- igraph::as_data_frame(g, what = "vertices")
ids <- get_go_ids_by_go(names(unlist(df$go)))
pvalues <- unique(data.frame(GO = ids, Pvalue = unlist(df$go)))
mets <- get_metabolite_ids(rownames(df))
df <- go_metabolite %>%
dplyr::filter(GO %in% ids) %>%
dplyr::filter(Metabolite %in% mets) %>%
dplyr::left_join(pvalues, by = "GO") %>%
group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue)) %>%
dplyr::ungroup()
df <- go_metabolite %>%
filter(GO %in% df$GO) %>%
group_by(GO) %>%
summarize(Total = n()) %>%
right_join(df, "GO")
g <- ggplot(df, aes(x = Closeness, y = Pvalue, size = Total, color = Number, text = GO)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
return(plotly::ggplotly(g))
}
get_2d_scatter(g)
#'@title Produce 2D pvalue-closeness scatter plot
#'@usage get_2d_scatter(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@importFrom dplyr filter
#'@importFrom plotly ggplotly
#'@importFrom ggplot2 ggplot geom_point ylim scale_color_gradient
#'theme_minimal scale_size_continuous
get_2d_scatter <- function(g){
df <- igraph::as_data_frame(g, what = "vertices")
ids <- get_go_ids_by_go(names(unlist(df$go)))
pvalues <- unique(data.frame(GO = ids, Pvalue = unlist(df$go)))
mets <- get_metabolite_ids(rownames(df))
df <- go_metabolite %>%
dplyr::filter(GO %in% ids) %>%
dplyr::filter(Metabolite %in% mets) %>%
dplyr::left_join(pvalues, by = "GO") %>%
group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue),
Number = n()) %>%
dplyr::ungroup()
df <- go_metabolite %>%
filter(GO %in% df$GO) %>%
group_by(GO) %>%
summarize(Total = n()) %>%
right_join(df, "GO")
g <- ggplot(df, aes(x = Closeness, y = Pvalue, size = Total, color = Number, text = GO)) +
geom_point() + ylim(0, 0.05) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
return(plotly::ggplotly(g))
}
get_2d_scatter(g)
#'@title Produce 2D pvalue-closeness scatter plot
#'@usage get_2d_scatter(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@importFrom dplyr filter
#'@importFrom plotly ggplotly
#'@importFrom ggplot2 ggplot geom_point ylim scale_color_gradient
#'theme_minimal scale_size_continuous
get_2d_scatter <- function(g){
df <- igraph::as_data_frame(g, what = "vertices")
ids <- get_go_ids_by_go(names(unlist(df$go)))
pvalues <- unique(data.frame(GO = ids, Pvalue = unlist(df$go)))
mets <- get_metabolite_ids(rownames(df))
df <- go_metabolite %>%
dplyr::filter(GO %in% ids) %>%
dplyr::filter(Metabolite %in% mets) %>%
dplyr::left_join(pvalues, by = "GO") %>%
group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue),
Number = n()) %>%
dplyr::ungroup()
df <- go_metabolite %>%
filter(GO %in% df$GO) %>%
group_by(GO) %>%
summarize(Total = n()) %>%
right_join(df, "GO")
g <- ggplot(df, aes(x = Closeness, y = Pvalue, size = Total, color = Number, text = GO)) +
geom_point() + ylim(min(Pvalue), max(Pvalue)) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
return(plotly::ggplotly(g))
}
get_2d_scatter(g)
#'@title Produce 2D pvalue-closeness scatter plot
#'@usage get_2d_scatter(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@importFrom dplyr filter
#'@importFrom plotly ggplotly
#'@importFrom ggplot2 ggplot geom_point ylim scale_color_gradient
#'theme_minimal scale_size_continuous
get_2d_scatter <- function(g){
df <- igraph::as_data_frame(g, what = "vertices")
ids <- get_go_ids_by_go(names(unlist(df$go)))
pvalues <- unique(data.frame(GO = ids, Pvalue = unlist(df$go)))
mets <- get_metabolite_ids(rownames(df))
df <- go_metabolite %>%
dplyr::filter(GO %in% ids) %>%
dplyr::filter(Metabolite %in% mets) %>%
dplyr::left_join(pvalues, by = "GO") %>%
group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue),
Number = n()) %>%
dplyr::ungroup()
df <- go_metabolite %>%
filter(GO %in% df$GO) %>%
group_by(GO) %>%
summarize(Total = n()) %>%
right_join(df, "GO")
g <- ggplot(df, aes(x = Closeness, y = Pvalue, size = Total, color = Number, text = GO)) +
geom_point() + ylim(min(df$Pvalue), max(df$Pvalue)) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
return(plotly::ggplotly(g))
}
get_2d_scatter(g)
#'@title Produce 2D pvalue-closeness scatter plot
#'@usage get_2d_scatter(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@importFrom dplyr filter
#'@importFrom plotly ggplotly
#'@importFrom ggplot2 ggplot geom_point ylim scale_color_gradient
#'theme_minimal scale_size_continuous
get_2d_scatter <- function(g){
df <- igraph::as_data_frame(g, what = "vertices")
ids <- get_go_ids_by_go(names(unlist(df$go)))
pvalues <- unique(data.frame(GO = ids, Pvalue = unlist(df$go)))
mets <- get_metabolite_ids(rownames(df))
df <- go_metabolite %>%
dplyr::filter(GO %in% ids) %>%
dplyr::filter(Metabolite %in% mets) %>%
dplyr::left_join(pvalues, by = "GO") %>%
group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue),
Number = n()) %>%
bind_cols(Name = get_go_names(GO)) %>%
dplyr::ungroup()
df <- go_metabolite %>%
filter(GO %in% df$GO) %>%
group_by(GO) %>%
summarize(Total = n()) %>%
right_join(df, "GO")
g <- ggplot(df, aes(x = Closeness, y = Pvalue, size = Total, color = Number, text = Name)) +
geom_point() + ylim(min(df$Pvalue), max(df$Pvalue)) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
return(plotly::ggplotly(g))
}
get_2d_scatter(g)
#'@title Produce 2D pvalue-closeness scatter plot
#'@usage get_2d_scatter(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@importFrom dplyr filter
#'@importFrom plotly ggplotly
#'@importFrom ggplot2 ggplot geom_point ylim scale_color_gradient
#'theme_minimal scale_size_continuous
get_2d_scatter <- function(g){
df <- igraph::as_data_frame(g, what = "vertices")
ids <- get_go_ids_by_go(names(unlist(df$go)))
pvalues <- unique(data.frame(GO = ids, Pvalue = unlist(df$go)))
mets <- get_metabolite_ids(rownames(df))
df <- go_metabolite %>%
dplyr::filter(GO %in% ids) %>%
dplyr::filter(Metabolite %in% mets) %>%
dplyr::left_join(pvalues, by = "GO") %>%
group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue),
Number = n()) %>%
dplyr::ungroup()
df <- cbind(df, Name = get_go_names(df$GO))
df <- go_metabolite %>%
filter(GO %in% df$GO) %>%
group_by(GO) %>%
summarize(Total = n()) %>%
right_join(df, "GO")
g <- ggplot(df, aes(x = Closeness, y = Pvalue, size = Total, color = Number, text = Name)) +
geom_point() + ylim(min(df$Pvalue), max(df$Pvalue)) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
return(plotly::ggplotly(g))
}
get_2d_scatter(g)
#'@title Produce 2D pvalue-closeness scatter plot
#'@usage get_2d_scatter(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@importFrom dplyr filter
#'@importFrom plotly ggplotly
#'@importFrom ggplot2 ggplot geom_point ylim scale_color_gradient
#'theme_minimal scale_size_continuous
get_2d_scatter <- function(g){
df <- igraph::as_data_frame(g, what = "vertices")
ids <- get_go_ids_by_go(names(unlist(df$go)))
pvalues <- unique(data.frame(GO = ids, Pvalue = unlist(df$go)))
mets <- get_metabolite_ids(rownames(df))
df <- go_metabolite %>%
dplyr::filter(GO %in% ids) %>%
dplyr::filter(Metabolite %in% mets) %>%
dplyr::left_join(pvalues, by = "GO") %>%
group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue),
Number = n()) %>%
dplyr::ungroup()
df <- cbind(df, Name = get_go_names(df$GO))
df <- go_metabolite %>%
filter(GO %in% df$GO) %>%
group_by(GO) %>%
summarize(Total = n()) %>%
right_join(df, "GO")
g <- ggplot(df, aes(text = Name, x = Closeness, y = Pvalue, color = Number, size = Total)) +
geom_point() + ylim(min(df$Pvalue), max(df$Pvalue)) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
return(plotly::ggplotly(g))
}
get_2d_scatter(g)
setwd("~/ImmunoMet/ImmunoMet")
devtools::install(upgrade = "never")
library(ImmunoMet)
load_data("config.yaml")
run_shiny()
devtools::load_all()
devtools::install(upgrade = "never")
library(ImmunoMet)
load_data("config.yaml")
run_shiny()
library(devtools)
library(roxygen2)
library(usethis)
