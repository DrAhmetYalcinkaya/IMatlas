v0 <- which(names(vs) == es[i,]$V1)
v1 <- which(names(vs) == es[i,]$V2)
edge_shape = list(type = "line", mode = "lines",  name = "interaction",
layer = "below", line = list(color = col_edge(), width = 0.6),
x0 = Xn[v0], y0 = Yn[v0], x1 = Xn[v1], y1 = Yn[v1]
)
if (i %in% cofactor_edges){
edge_shape$line = list(color = col_cofactor(), width = 0.6)
}
edge_shapes[[i]] <- edge_shape
}
return(edge_shapes)
}
#'@title Calculate the harmonized closeness of a graph
#'@usage harmonized_closeness(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
harmonized_closeness <- function(g){
df <- 1 / shortest.paths(g)
df[is.infinite(df)] <- 0
as.vector(rowSums(df) / (nrow(df) - 1))
}
#'@title Calculate GO pvalues using Fisher's test
#'@usage fishers_test(
#'    id,
#'    all_go_in_network,
#'    all_go
#')
#'@param id String Gene Ontology identifier
#'@param all_go_in_network Table of Gene Ontology counts in the current network
#'@param all_go Table of Gene Ontology counts in the database
#'@importFrom stats fisher.test
fishers_test <- function(id, all_go_in_network, all_go){
a <- all_go_in_network[id]
b <- sum(all_go_in_network) - a
c <- all_go[id] - a
d <- sum(all_go) - a - b - c
return(stats::fisher.test(matrix(c(a, b, c, d), ncol = 2, byrow = T))$p.value)
}
#'@title Calculate all GO pvalues in the graph
#'@usage calculate_pvalues(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@importFrom stats p.adjust
calculate_pvalues <- function(g){
to_search <- unlist(V(g)$go)
ids <- table(get_go_ids_by_go(to_search))
all_go <- table(protein_go_df$GOID)
vec <- p.adjust(sapply(names(ids), simplify = F, USE.NAMES = T, function(id){
return(fishers_test(id, ids, all_go))
}))
#vec <- vec[vec < 0.05]
names(vec) <- get_go_names(names(vec))
return(vec)
}
#'@title Assign GOs to metabolites & proteins
#'@usage get_gos_per_cluster(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
get_gos_per_cluster <- function(g, pvalues){
gos_per_cluster <- lapply(unique(V(g)$cluster), function(cl){
cluster_vertices <- V(g)[which(V(g)$cluster == cl)]
res <- unlist(V(g)[cluster_vertices]$go)
res <- res[!is.na(res)]
res <- res[!duplicated(res)]
pvalues[names(pvalues) %in% res]
})
V(g)$go <- lapply(1:length(V(g)), function(node) gos_per_cluster[[V(g)[node]$cluster]])
return(g)
}
#'@title Get indexes of cofactor edges by identifier
#'@usage get_cofactor_edge_ids(
#'    g,
#'    cofactors
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@param cofactors Vector of metabolite cofactors
#'@importFrom stats na.omit
get_cofactor_edge_ids <- function(g, cofactors){
ind <- which(cofactors %in% V(g)$id)
cofactors <- cofactors[ind]
l <- unlist(as.vector(sapply(na.omit(cofactors), function(n) which(V(g)$id == n))))
vec <- data.frame("From" = ind, "To" = l)
return(unique(igraph::get.edge.ids(g, c(t(vec)))))
}
#'@title Get indexes of enzymes vertices by identifier
#'@usage get_enzyme_vertice_ids(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
get_enzyme_vertice_ids <- function(g){
return(which(!is.na(V(g)$enzyme)))
}
#'@title Get indexes of proteins vertices by identifier
#'@usage get_protein_vertice_ids(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
get_protein_vertice_ids <- function(g){
return(which(!startsWith(V(g)$id, "HMDB")))
}
#'@title Get indexes of metabolites vertices by identifier
#'@usage get_metabolite_vertice_ids(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
get_metabolite_vertice_ids <- function(g){
return(which(startsWith(V(g)$id, "HMDB")))
}
#'@title Get indexes of transporter vertices by identifier
#'@usage get_transporter_vertice_ids(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
get_transporter_vertice_ids <- function(g){
return(which(V(g)$id %in% prot_trans$ID))
}
#'@title Get index of vertice in graph by identifier
#'@usage get_vertice_id(
#'    g,
#'    id
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@param id String identifier of metabolite or protein
get_vertice_id <- function(g, id){
return(which(V(g)$id == id))
}
#'@title Get protein-protein interaction confidences
#'@usage get_pp_confidences(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
get_pp_confidences <- function(g){
df <- igraph::get.data.frame(g, "edges")
colnames(pp_interactions) <- c("from", "to", "confidence")
df$from <- get_protein_ids(df$from)
df$to <- get_protein_ids(df$to)
return(suppressMessages(dplyr::left_join(df, pp_interactions)$confidence))
}
#'@title Get edge ids between nodes of interest using shortest paths.
#'@usage get_edge_ids(
#'    g,
#'    combinations
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@param combinations Dataframe of edges
get_edge_ids <- function(g, combinations){
unique(unlist(apply(combinations, 1, function(x){
unlist(igraph::shortest_paths(g, V(g)[x[1]], V(g)[x[2]],
mode = "all", output = "epath")$epath)
})))
}
#'@title Obtain shortest graph between nodes
#'@usage get_shortest_path_graph(
#'    g,
#'    filter
#')
#'@param g iGraph object obtained from to_graph(), get_graph()
#'@param filter Names of protein/metabolites to search
#'@importFrom gtools combinations
get_shortest_path_graph <- function(g, filter){
filter <- convert_names_to_ids(filter)
inds <- which(V(g)$name %in% filter)
g <- igraph::delete.edges(g, which(E(g)$Confidence <= pp_confidence()))
if (length(inds) > 0){
combs <- gtools::combinations(n = length(inds), r = 2, v = inds)
sub <- igraph::subgraph.edges(g, get_edge_ids(g, combs))
return(igraph::get.data.frame(sub, "edges"))
}
}
#'@title Produce 2D pvalue-closeness scatter plot
#'@usage get_2d_scatter(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@importFrom dplyr filter group_by left_join ungroup right_join summarize n
#'@importFrom plotly ggplotly
#'@importFrom ggplot2 ggplot geom_point ylim scale_color_gradient
#'theme_minimal scale_size_continuous
get_2d_scatter <- function(g){
df <- igraph::as_data_frame(g, what = "vertices")
ids <- get_go_ids_by_go(names(unlist(df$go)))
pvalues <- unique(data.frame(GO = ids, Pvalue = unlist(df$go)))
mets <- get_metabolite_ids(rownames(df))
df <- go_metabolite %>%
dplyr::filter(GO %in% ids) %>%
dplyr::filter(Metabolite %in% mets) %>%
dplyr::left_join(pvalues, by = "GO") %>%
group_by(GO) %>%
summarize(Closeness = mean(Centrality), Pvalue = mean(Pvalue),
Number = dplyr::n()) %>%
dplyr::ungroup()
df <- cbind(df, Name = get_go_names(df$GO))
df <- go_metabolite %>%
dplyr::filter(GO %in% df$GO) %>%
dplyr::group_by(GO) %>%
dplyr::summarize(Total = n()) %>%
dplyr::right_join(df, "GO")
g <- ggplot(df, aes(text = Name, x = Closeness, y = Pvalue, color = Number, size = Total)) +
geom_point() + ylim(min(df$Pvalue), max(df$Pvalue)) + scale_color_gradient(low="red", high="yellow") +
theme_minimal() + scale_size_continuous(range = c(5, 15))
return(plotly::ggplotly(g))
}
g <- example_graph()
library(data.table)
g <- example_graph()
library(pbapply)
g <- example_graph()
#'@title Convert interaction dataframe to iGraph object
#'@usage to_graph(
#'    df
#')
#'@param df Dataframe of interactions between nodes
to_graph <- function(df, type){
g <- igraph::simplify(igraph::graph_from_data_frame(df, directed = F))
V(g)$id <- igraph::V(g)$name
V(g)$name <- make.unique(convert_ids_to_names(V(g)$id))
V(g)$go <- get_all_protein_gos(V(g)$id)
V(g)$centrality <- round(harmonized_closeness(g), 3)
V(g)$cluster <- igraph::components(g)$membership
#g <- get_gos_per_cluster(g, calculate_pvalues(g))
g <- inheritence_by_threshold(g, calculate_pvalues(g))
if (type == "GO Simple"){
g <- construct_metabolite_go_network(g)
}
print(g)
g <- g %>%
add_metadata_to_graph() %>%
add_vertice_colors() %>%
add_class_metadata %>%
add_superclass_metadata()
#    g <- add_metadata_to_graph(g)
#    g <- add_vertice_colors(g)
#    g <- add_class_metadata(g)
#    g <- add_superclass_metadata(g)
layout <- as.data.frame(igraph::layout.fruchterman.reingold(g))
V(g)$x <- layout[,1]
V(g)$y <- layout[,2]
return(g)
}
g <- example_graph()
#'@title inheritance of gos
#'@importFrom igraph distances V
#'@importFrom data.table as.data.table
#'@importFrom pbapply pblapply
inheritence_by_threshold <- function(graph, pvalues, threshold = 1, neighbours = 0){
# pvalues = named vector of go - pvalue
dis <- wide_to_long_by_threshold(
igraph::distances(graph, v = V(graph)[get_metabolite_vertice_ids(graph)],
V(graph)[get_protein_vertice_ids(graph)]), threshold
)
mets <- unique(dis$From)
dis <- as.data.table(dis, key = "From")
V(graph)[mets] <- pblapply(mets, cl=4, function(x){
prots <- as.vector(dis[x]$To)
gos <- protein_go_df[protein_go_df$ID %in% prots,]$GOID
if (length(gos) > 0){
go_names <- get_go_names(unique(gos))
print(go_names)
pvalues[go_names]
}
})
return(graph)
}
g <- example_graph()
#'@title inheritance of gos
#'@importFrom igraph distances V
#'@importFrom data.table as.data.table
#'@importFrom pbapply pblapply
inheritence_by_threshold <- function(graph, pvalues, threshold = 1, neighbours = 0){
# pvalues = named vector of go - pvalue
dis <- wide_to_long_by_threshold(
igraph::distances(graph, v = V(graph)[get_metabolite_vertice_ids(graph)],
V(graph)[get_protein_vertice_ids(graph)]), threshold
)
mets <- unique(dis$From)
dis <- as.data.table(dis, key = "From")
V(graph)[mets] <- pblapply(mets, cl=4, function(x){
prots <- as.vector(dis[x]$To)
print(prots)
gos <- protein_go_df[protein_go_df$ID %in% prots,]$GOID
if (length(gos) > 0){
go_names <- get_go_names(unique(gos))
print(go_names)
pvalues[go_names]
}
})
return(graph)
}
g <- example_graph()
#'@title inheritance of gos
#'@importFrom igraph distances V
#'@importFrom data.table as.data.table
#'@importFrom pbapply pblapply
inheritence_by_threshold <- function(graph, pvalues, threshold = 1, neighbours = 0){
# pvalues = named vector of go - pvalue
dis <- wide_to_long_by_threshold(
igraph::distances(graph, v = V(graph)[get_metabolite_vertice_ids(graph)],
V(graph)[get_protein_vertice_ids(graph)]), threshold
)
mets <- unique(dis$From)
dis <- as.data.table(dis, key = "From")
print(dis)
V(graph)[mets] <- pblapply(mets, cl=4, function(x){
prots <- as.vector(dis[x]$To)
gos <- protein_go_df[protein_go_df$ID %in% prots,]$GOID
if (length(gos) > 0){
go_names <- get_go_names(unique(gos))
#print(go_names)
pvalues[go_names]
}
})
return(graph)
}
g <- example_graph()
#'@title inheritance of gos
#'@importFrom igraph distances V
#'@importFrom data.table as.data.table
#'@importFrom pbapply pblapply
inheritence_by_threshold <- function(graph, pvalues, threshold = 1, neighbours = 0){
# pvalues = named vector of go - pvalue
dis <- wide_to_long_by_threshold(
igraph::distances(graph, v = V(graph)[get_metabolite_vertice_ids(graph)],
V(graph)[get_protein_vertice_ids(graph)]), threshold
)
#dis$From <- get_metabolite_ids(dis$From)
dis$To <- get_protein_ids(dis$To)
mets <- unique(dis$From)
dis <- as.data.table(dis, key = "From")
print(dis)
V(graph)[mets] <- pblapply(mets, cl=4, function(x){
prots <- as.vector(dis[x]$To)
gos <- protein_go_df[protein_go_df$ID %in% prots,]$GOID
if (length(gos) > 0){
go_names <- get_go_names(unique(gos))
#print(go_names)
pvalues[go_names]
}
})
return(graph)
}
g <- example_graph()
#'@title inheritance of gos
#'@importFrom igraph distances V
#'@importFrom data.table as.data.table
#'@importFrom pbapply pblapply
inheritence_by_threshold <- function(graph, pvalues, threshold = 1, neighbours = 0){
# pvalues = named vector of go - pvalue
dis <- wide_to_long_by_threshold(
igraph::distances(graph, v = V(graph)[get_metabolite_vertice_ids(graph)],
V(graph)[get_protein_vertice_ids(graph)]), threshold
)
#dis$From <- get_metabolite_ids(dis$From)
dis$To <- get_protein_ids(dis$To)
mets <- unique(dis$From)
dis <- as.data.table(dis, key = "From")
print(dis)
l <- pblapply(mets, cl=4, function(x){
prots <- as.vector(dis[x]$To)
gos <- protein_go_df[protein_go_df$ID %in% prots,]$GOID
if (length(gos) > 0){
go_names <- get_go_names(unique(gos))
#print(go_names)
pvalues[go_names]
}
})
print(l)
return(graph)
}
g <- example_graph()
#'@title inheritance of gos
#'@importFrom igraph distances V
#'@importFrom data.table as.data.table
#'@importFrom pbapply pblapply
inheritence_by_threshold <- function(graph, pvalues, threshold = 1, neighbours = 0){
# pvalues = named vector of go - pvalue
dis <- wide_to_long_by_threshold(
igraph::distances(graph, v = V(graph)[get_metabolite_vertice_ids(graph)],
V(graph)[get_protein_vertice_ids(graph)]), threshold
)
#dis$From <- get_metabolite_ids(dis$From)
dis$To <- get_protein_ids(dis$To)
mets <- unique(dis$From)
dis <- as.data.table(dis, key = "From")
print(dis)
V(graph)[mets] <- pblapply(mets, cl=4, function(x){
prots <- as.vector(dis[x]$To)
gos <- protein_go_df[protein_go_df$ID %in% prots,]$GOID
if (length(gos) > 0){
go_names <- get_go_names(unique(gos))
#print(go_names)
list(pvalues[go_names])
}
})
return(graph)
}
g <- example_graph()
#'@title inheritance of gos
#'@importFrom igraph distances V
#'@importFrom data.table as.data.table
#'@importFrom pbapply pblapply
inheritence_by_threshold <- function(graph, pvalues, threshold = 1, neighbours = 0){
# pvalues = named vector of go - pvalue
dis <- wide_to_long_by_threshold(
igraph::distances(graph, v = V(graph)[get_metabolite_vertice_ids(graph)],
V(graph)[get_protein_vertice_ids(graph)]), threshold
)
#dis$From <- get_metabolite_ids(dis$From)
dis$To <- get_protein_ids(dis$To)
mets <- unique(dis$From)
dis <- as.data.table(dis, key = "From")
print(dis)
l <- pblapply(mets, cl=4, function(x){
prots <- as.vector(dis[x]$To)
gos <- protein_go_df[protein_go_df$ID %in% prots,]$GOID
if (length(gos) > 0){
go_names <- get_go_names(unique(gos))
#print(go_names)
pvalues[go_names]
}
})
print(length(l))
print(length(mets))
return(graph)
}
g <- example_graph()
#'@title inheritance of gos
#'@importFrom igraph distances V
#'@importFrom data.table as.data.table
#'@importFrom pbapply pblapply
inheritence_by_threshold <- function(graph, pvalues, threshold = 1, neighbours = 0){
# pvalues = named vector of go - pvalue
dis <- wide_to_long_by_threshold(
igraph::distances(graph, v = V(graph)[get_metabolite_vertice_ids(graph)],
V(graph)[get_protein_vertice_ids(graph)]), threshold
)
#dis$From <- get_metabolite_ids(dis$From)
dis$To <- get_protein_ids(dis$To)
mets <- unique(dis$From)
dis <- as.data.table(dis, key = "From")
print(dis)
V(graph)[mets]$go <- pblapply(mets, cl=4, function(x){
prots <- as.vector(dis[x]$To)
gos <- protein_go_df[protein_go_df$ID %in% prots,]$GOID
if (length(gos) > 0){
go_names <- get_go_names(unique(gos))
#print(go_names)
pvalues[go_names]
}
})
return(graph)
}
g <- example_graph()
library(shiny)
g <- example_graph()
V(g)$go
V(g)[get_metabolite_vertice_ids(g)]$go
V(g)[[get_metabolite_vertice_ids(g)]]$go
V(g)[get_metabolite_vertice_ids(g)]$go[[1]]
V(g)[get_metabolite_vertice_ids(g)]$go[[2]]
#'@title Calculate all GO pvalues in the graph
#'@usage calculate_pvalues(
#'    g
#')
#'@param g iGraph object obtained from to_graph() or get_graph()
#'@importFrom stats p.adjust
calculate_pvalues <- function(g){
to_search <- unlist(V(g)$go)
ids <- table(get_go_ids_by_go(to_search))
all_go <- table(protein_go_df$GOID)
vec <- p.adjust(sapply(names(ids), simplify = F, USE.NAMES = T, function(id){
return(fishers_test(id, ids, all_go))
}))
vec <- vec[vec < 0.05]
names(vec) <- get_go_names(names(vec))
return(vec)
}
g <- example_graph()
V(g)[get_metabolite_vertice_ids(g)]$go
#'@title inheritance of gos
#'@importFrom igraph distances V
#'@importFrom data.table as.data.table
#'@importFrom pbapply pblapply
inheritence_by_threshold <- function(graph, pvalues, threshold = 1, neighbours = 0){
# pvalues = named vector of go - pvalue
dis <- wide_to_long_by_threshold(
igraph::distances(graph, v = V(graph)[get_metabolite_vertice_ids(graph)],
V(graph)[get_protein_vertice_ids(graph)]), threshold
)
#dis$From <- get_metabolite_ids(dis$From)
dis$To <- get_protein_ids(dis$To)
mets <- unique(dis$From)
dis <- as.data.table(dis, key = "From")
print(dis)
V(graph)[mets]$go <- pblapply(mets, cl=4, function(x){
prots <- as.vector(dis[x]$To)
gos <- protein_go_df[protein_go_df$ID %in% prots,]$GOID
if (length(gos) > 0){
go_names <- get_go_names(unique(gos))
#print(go_names)
pvalues[go_names[go_names %in% names(pvalues)]]
}
})
return(graph)
}
g <- example_graph()
V(g)[get_metabolite_vertice_ids(g)]$go
V(g)[[get_metabolite_vertice_ids(g)]]$go
V(g)$go
